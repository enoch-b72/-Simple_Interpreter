
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE ELSE EQ EQEQ GE GT IDENTIFIER IF LBRACE LE LET LPAREN LT MINUS NE NUMBER PLUS PRINT QUOTE RBRACE RPAREN SEMI TIMESprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : let_statement\n                 | print_statement\n                 | if_statementlet_statement : LET IDENTIFIER EQ expression SEMIprint_statement : PRINT LPAREN expression RPAREN SEMI\n                       | PRINT LPAREN QUOTE string QUOTE RPAREN SEMIif_statement : IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE\n                    | IF expression LBRACE statement_list RBRACEexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression LT term\n                  | expression GT term\n                  | expression LE term\n                  | expression GE term\n                  | expression EQEQ term\n                  | expression NE termterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | IDENTIFIER\n              | LPAREN expression RPARENstring : IDENTIFIER\n              | string IDENTIFIER'
    
_lr_action_items = {'LET':([0,2,3,4,5,6,10,22,38,50,51,54,57,58,59,60,],[7,7,-2,-4,-5,-6,-3,7,7,-7,-8,-11,-9,7,7,-10,]),'PRINT':([0,2,3,4,5,6,10,22,38,50,51,54,57,58,59,60,],[8,8,-2,-4,-5,-6,-3,8,8,-7,-8,-11,-9,8,8,-10,]),'IF':([0,2,3,4,5,6,10,22,38,50,51,54,57,58,59,60,],[9,9,-2,-4,-5,-6,-3,9,9,-7,-8,-11,-9,9,9,-10,]),'$end':([1,2,3,4,5,6,10,50,51,54,57,60,],[0,-1,-2,-4,-5,-6,-3,-7,-8,-11,-9,-10,]),'RBRACE':([3,4,5,6,10,38,50,51,54,57,59,60,],[-2,-4,-5,-6,-3,54,-7,-8,-11,-9,60,-10,]),'IDENTIFIER':([7,9,12,18,19,21,23,24,25,26,27,28,29,30,31,32,36,37,53,],[11,17,17,17,17,37,17,17,17,17,17,17,17,17,17,17,53,-27,-28,]),'LPAREN':([8,9,12,18,19,23,24,25,26,27,28,29,30,31,32,],[12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'NUMBER':([9,12,18,19,23,24,25,26,27,28,29,30,31,32,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'EQ':([11,],[19,]),'QUOTE':([12,36,37,53,],[21,52,-27,-28,]),'LBRACE':([13,14,15,16,17,39,40,41,42,43,44,45,46,47,48,49,56,],[22,-12,-21,-24,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,58,]),'PLUS':([13,14,15,16,17,20,33,34,39,40,41,42,43,44,45,46,47,48,49,],[23,-12,-21,-24,-25,23,23,23,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,]),'MINUS':([13,14,15,16,17,20,33,34,39,40,41,42,43,44,45,46,47,48,49,],[24,-12,-21,-24,-25,24,24,24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,]),'LT':([13,14,15,16,17,20,33,34,39,40,41,42,43,44,45,46,47,48,49,],[25,-12,-21,-24,-25,25,25,25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,]),'GT':([13,14,15,16,17,20,33,34,39,40,41,42,43,44,45,46,47,48,49,],[26,-12,-21,-24,-25,26,26,26,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,]),'LE':([13,14,15,16,17,20,33,34,39,40,41,42,43,44,45,46,47,48,49,],[27,-12,-21,-24,-25,27,27,27,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,]),'GE':([13,14,15,16,17,20,33,34,39,40,41,42,43,44,45,46,47,48,49,],[28,-12,-21,-24,-25,28,28,28,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,]),'EQEQ':([13,14,15,16,17,20,33,34,39,40,41,42,43,44,45,46,47,48,49,],[29,-12,-21,-24,-25,29,29,29,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,]),'NE':([13,14,15,16,17,20,33,34,39,40,41,42,43,44,45,46,47,48,49,],[30,-12,-21,-24,-25,30,30,30,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,]),'RPAREN':([14,15,16,17,20,33,39,40,41,42,43,44,45,46,47,48,49,52,],[-12,-21,-24,-25,35,49,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,55,]),'SEMI':([14,15,16,17,34,35,39,40,41,42,43,44,45,46,47,48,49,55,],[-12,-21,-24,-25,50,51,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-26,57,]),'TIMES':([14,15,16,17,39,40,41,42,43,44,45,46,47,48,49,],[31,-21,-24,-25,31,31,31,31,31,31,31,31,-22,-23,-26,]),'DIVIDE':([14,15,16,17,39,40,41,42,43,44,45,46,47,48,49,],[32,-21,-24,-25,32,32,32,32,32,32,32,32,-22,-23,-26,]),'ELSE':([54,],[56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,22,58,],[2,38,59,]),'statement':([0,2,22,38,58,59,],[3,10,3,10,3,10,]),'let_statement':([0,2,22,38,58,59,],[4,4,4,4,4,4,]),'print_statement':([0,2,22,38,58,59,],[5,5,5,5,5,5,]),'if_statement':([0,2,22,38,58,59,],[6,6,6,6,6,6,]),'expression':([9,12,18,19,],[13,20,33,34,]),'term':([9,12,18,19,23,24,25,26,27,28,29,30,],[14,14,14,14,39,40,41,42,43,44,45,46,]),'factor':([9,12,18,19,23,24,25,26,27,28,29,30,31,32,],[15,15,15,15,15,15,15,15,15,15,15,15,47,48,]),'string':([21,],[36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',6),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',10),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',11),
  ('statement -> let_statement','statement',1,'p_statement','parser.py',18),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',19),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',20),
  ('let_statement -> LET IDENTIFIER EQ expression SEMI','let_statement',5,'p_let_statement','parser.py',24),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',28),
  ('print_statement -> PRINT LPAREN QUOTE string QUOTE RPAREN SEMI','print_statement',7,'p_print_statement','parser.py',29),
  ('if_statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_statement',9,'p_if_statement','parser.py',36),
  ('if_statement -> IF expression LBRACE statement_list RBRACE','if_statement',5,'p_if_statement','parser.py',37),
  ('expression -> term','expression',1,'p_expression','parser.py',44),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',45),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',46),
  ('expression -> expression LT term','expression',3,'p_expression','parser.py',47),
  ('expression -> expression GT term','expression',3,'p_expression','parser.py',48),
  ('expression -> expression LE term','expression',3,'p_expression','parser.py',49),
  ('expression -> expression GE term','expression',3,'p_expression','parser.py',50),
  ('expression -> expression EQEQ term','expression',3,'p_expression','parser.py',51),
  ('expression -> expression NE term','expression',3,'p_expression','parser.py',52),
  ('term -> factor','term',1,'p_term','parser.py',59),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',60),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',61),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',68),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',69),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',70),
  ('string -> IDENTIFIER','string',1,'p_string','parser.py',77),
  ('string -> string IDENTIFIER','string',2,'p_string','parser.py',78),
]
